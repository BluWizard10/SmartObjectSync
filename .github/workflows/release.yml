name: Build Release

on:
  workflow_dispatch:
  push:
    branches: main
    paths: Packages/com.mmmaellon.smartobjectsync/**

env:
  packageName: 'com.mmmaellon.smartobjectsync'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: get version
        id: version
        uses: notiz-dev/github-action-json-property@7c8cf5cc36eb85d8d287a8086a39dac59628eb31
        with:
          path: 'Packages/${{env.packageName}}/package.json'
          prop_path: 'version'

      - name: Set Environment Variables
        run: |
          echo "zipFile=${{ env.packageName }}-${{ steps.version.outputs.prop }}".zip >> $GITHUB_ENV
          echo "unityPackage=${{ env.packageName }}-${{ steps.version.outputs.prop }}.unitypackage" >> $GITHUB_ENV

      - name: Create Zip
        uses: thedoctor0/zip-release@09336613be18a8208dfa66bd57efafd9e2685657
        with:
          type: 'zip'
          directory: 'Packages/${{env.packageName}}/'
          filename: '../../${{env.zipFile}}' # make the zip file two directories up, since we start two directories in above

      - run: find "Packages/${{env.packageName}}/" -name \*.meta >> metaList

      - name: Create UnityPackage
        uses: pCYSl5EDgo/create-unitypackage@cfcd3cf0391a5ef1306342794866a9897c32af0b
        with:
          package-path: ${{ env.unityPackage }}
          include-files: metaList

      - name: Overwrite Release
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { owner, repo } = context.repo;
            const tagName = '${{ steps.version.outputs.prop }}';
            const existingRelease = await github.repos.getReleaseByTag({ owner, repo, tag: tagName }).catch(() => null);

            if (existingRelease) {
              await github.repos.deleteRelease({ owner, repo, release_id: existingRelease.data.id });
              await github.git.deleteRef({ owner, repo, ref: `tags/${tagName}` });
            }

            const release = await github.repos.createRelease({
              owner,
              repo,
              tag_name: tagName,
              name: tagName,
              prerelease: true
            });

            const { id: releaseId } = release.data;

            const files = [
              { path: '${{ env.zipFile }}', content_type: 'application/zip' },
              { path: '${{ env.unityPackage }}', content_type: 'application/octet-stream' },
              { path: 'Packages/${{ env.packageName }}/package.json', content_type: 'application/json' },
            ];

            for (const file of files) {
              const content = await fs.promises.readFile(file.path, { encoding: 'base64' });
              await github.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: releaseId,
                name: path.basename(file.path),
                data: content,
                content_type: file.content_type,
              });
            }
